valgrind --leak-check=full ./a.out
==764== Memcheck, a memory error detector
==764== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==764== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==764== Command: ./a.out
==764==
==764== error calling PR_SET_PTRACER, vgdb might block


 1 - load from file. It will read from file and create 2 linked lists, L1 and L2. If L1 and L2 exist, they are first destroyed and then they are recreated with data from the file  .
 2 - check that list L1 is sorted in increasing order.
 3 - merge L1 with L2 and print the resulting list, L1. The result list will be referenced from variable L1. It should check that BOTH lists are sorted in increasing order in order for the merge to work.
 4 - remove duplicates from L1. (this method will assumes L1 is sorted in increasing order.)
 5 - print lists L1 and L2.
 6 - destroy L1 and L2 (and free the memory). If L1 and L2 are NULL it should not crash.
 0 - exit.
 Enter your choice (1-6):  1
Enter the name of the file with data: big1.txt
Reading list from file....
Reading list from file....


 1 - load from file. It will read from file and create 2 linked lists, L1 and L2. If L1 and L2 exist, they are first destroyed and then they are recreated with data from the file  .
 2 - check that list L1 is sorted in increasing order.
 3 - merge L1 with L2 and print the resulting list, L1. The result list will be referenced from variable L1. It should check that BOTH lists are sorted in increasing order in order for the merge to work.
 4 - remove duplicates from L1. (this method will assumes L1 is sorted in increasing order.)
 5 - print lists L1 and L2.
 6 - destroy L1 and L2 (and free the memory). If L1 and L2 are NULL it should not crash.
 0 - exit.
 Enter your choice (1-6):  3

 Dummy node: data = -9999 (adr = 0x5230330)
 List items:                 0              0              0              0              0              0              0              0              0              0              1              1              1              1              1              1              1              1              1              1              2              2              2              2              2              2              2              2              2              2              3              3              3              3              3              3              3              3              3              3              4              4              4              4              4              4              4              4              4              4              5              5              5              5              5              5              5              5              5              5              6              6              6              6              6              6              6              6              6              6              7              7              7              7              7              7              7              7              7              7              8              8              8              8              8              8              8              8              8              8              9              9              9              9              9              9              9              9              9              9
 List pointers:      0x52313c0      0x5231410      0x5231460      0x52314b0      0x5231500      0x5231550      0x52315a0      0x52315f0      0x5231640      0x5231690      0x52316e0      0x5231730      0x5231780      0x52317d0      0x5231820      0x5231870      0x52318c0      0x5231910      0x5231960      0x52319b0      0x5231a00      0x5231a50      0x5231aa0      0x5231af0      0x5231b40      0x5231b90      0x5231be0      0x5231c30      0x5231c80      0x5231cd0      0x5231d20      0x5231d70      0x5231dc0      0x5231e10      0x5231e60      0x5231eb0      0x5231f00      0x5231f50      0x5231fa0      0x5231ff0      0x5232040      0x5232090      0x52320e0      0x5232130      0x5232180      0x52321d0      0x5232220      0x5232270      0x52322c0      0x5232310      0x5232360      0x52323b0      0x5232400      0x5232450      0x52324a0      0x52324f0      0x5232540      0x5232590      0x52325e0      0x5232630      0x5232680      0x52326d0      0x5232720      0x5232770      0x52327c0      0x5232810      0x5232860      0x52328b0      0x5232900      0x5232950      0x52329a0      0x52329f0      0x5232a40      0x5232a90      0x5232ae0      0x5232b30      0x5232b80      0x5232bd0      0x5232c20      0x5232c70      0x5232cc0      0x5232d10      0x5232d60      0x5232db0      0x5232e00      0x5232e50      0x5232ea0      0x5232ef0      0x5232f40      0x5232f90      0x5232fe0      0x5233030      0x5233080      0x52330d0      0x5233120      0x5233170      0x52331c0      0x5233210      0x5233260      0x52332b0
 Length of above list = 100

 Dummy node: data = -9999 (adr = 0x5233300)
 List items:                 0              0              0              0              0              0              0              0              0              0              1              1              1              1              1              1              1              1              1              1              2              2              2              2              2              2              2              2              2              2              3              3              3              3              3              3              3              3              3              3              4              4              4              4              4              4              4              4              4              4              5              5              5              5              5              5              5              5              5              5              6              6              6              6              6              6              6              6              6              6              7              7              7              7              7              7              7              7              7              7              8              8              8              8              8              8              8              8              8              8              9              9              9              9              9              9              9              9              9              9
 List pointers:      0x5233350      0x52333a0      0x52333f0      0x5233440      0x5233490      0x52334e0      0x5233530      0x5233580      0x52335d0      0x5233620      0x5233670      0x52336c0      0x5233710      0x5233760      0x52337b0      0x5233800      0x5233850      0x52338a0      0x52338f0      0x5233940      0x5233990      0x52339e0      0x5233a30      0x5233a80      0x5233ad0      0x5233b20      0x5233b70      0x5233bc0      0x5233c10      0x5233c60      0x5233cb0      0x5233d00      0x5233d50      0x5233da0      0x5233df0      0x5233e40      0x5233e90      0x5233ee0      0x5233f30      0x5233f80      0x5233fd0      0x5234020      0x5234070      0x52340c0      0x5234110      0x5234160      0x52341b0      0x5234200      0x5234250      0x52342a0      0x52342f0      0x5234340      0x5234390      0x52343e0      0x5234430      0x5234480      0x52344d0      0x5234520      0x5234570      0x52345c0      0x5234610      0x5234660      0x52346b0      0x5234700      0x5234750      0x52347a0      0x52347f0      0x5234840      0x5234890      0x52348e0      0x5234930      0x5234980      0x52349d0      0x5234a20      0x5234a70      0x5234ac0      0x5234b10      0x5234b60      0x5234bb0      0x5234c00      0x5234c50      0x5234ca0      0x5234cf0      0x5234d40      0x5234d90      0x5234de0      0x5234e30      0x5234e80      0x5234ed0      0x5234f20      0x5234f70      0x5234fc0      0x5235010      0x5235060      0x52350b0      0x5235100      0x5235150      0x52351a0      0x52351f0      0x5235240
 Length of above list = 100

 Dummy node: data = -9999 (adr = 0x5230330)
 List items
 List pointers:      0x52313c0      0x5231410      0x5231460      0x52314b0      0x5231500      0x5231550      0x52315a0      0x52315f0      0x5231640      0x5231690      0x5233350      0x52333a0      0x52333f0      0x5233440      0x5233490      0x52334e0      0x5233530      0x5233580      0x52335d0      0x5233620      0x52316e0      0x5231730      0x5231780      0x52317d0      0x5231820      0x5231870      0x52318c0      0x5231910      0x5231960      0x52319b0      0x5233670      0x52336c0      0x5233710      0x5233760      0x52337b0      0x5233800      0x5233850      0x52338a0      0x52338f0      0x5233940      0x5231a00      0x5231a50      0x5231aa0      0x5231af0      0x5231b40      0x5231b90      0x5231be0      0x5231c30      0x5231c80      0x5231cd0      0x5233990      0x52339e0      0x5233a30      0x5233a80      0x5233ad0      0x5233b20      0x5233b70      0x5233bc0      0x5233c10      0x5233c60      0x5231d20      0x5231d70      0x5231dc0      0x5231e10      0x5231e60      0x5231eb0      0x5231f00      0x5231f50      0x5231fa0      0x5231ff0      0x5233cb0      0x5233d00      0x5233d50      0x5233da0      0x5233df0      0x5233e40      0x5233e90      0x5233ee0      0x5233f30      0x5233f80      0x5232040      0x5232090      0x52320e0      0x5232130      0x5232180      0x52321d0      0x5232220      0x5232270      0x52322c0      0x5232310      0x5233fd0      0x5234020      0x5234070      0x52340c0      0x5234110      0x5234160      0x52341b0      0x5234200      0x5234250      0x52342a0      0x5232360      0x52323b0      0x5232400      0x5232450      0x52324a0      0x52324f0      0x5232540      0x5232590      0x52325e0      0x5232630      0x52342f0      0x5234340      0x5234390      0x52343e0      0x5234430      0x5234480      0x52344d0      0x5234520      0x5234570      0x52345c0      0x5232680      0x52326d0      0x5232720      0x5232770      0x52327c0      0x5232810      0x5232860      0x52328b0      0x5232900      0x5232950      0x5234610      0x5234660      0x52346b0      0x5234700      0x5234750      0x52347a0      0x52347f0      0x5234840      0x5234890      0x52348e0      0x52329a0      0x52329f0      0x5232a40      0x5232a90      0x5232ae0      0x5232b30      0x5232b80      0x5232bd0      0x5232c20      0x5232c70      0x5234930      0x5234980      0x52349d0      0x5234a20      0x5234a70      0x5234ac0      0x5234b10      0x5234b60      0x5234bb0      0x5234c00      0x5232cc0      0x5232d10      0x5232d60      0x5232db0      0x5232e00      0x5232e50      0x5232ea0      0x5232ef0      0x5232f40      0x5232f90      0x5234c50      0x5234ca0      0x5234cf0      0x5234d40      0x5234d90      0x5234de0      0x5234e30      0x5234e80      0x5234ed0      0x5234f20      0x5232fe0      0x5233030      0x5233080      0x52330d0      0x5233120      0x5233170      0x52331c0      0x5233210      0x5233260      0x52332b0      0x5234f70      0x5234fc0      0x5235010      0x5235060      0x52350b0      0x5235100      0x5235150      0x52351a0      0x52351f0      0x5235240
 Length of above list = 200


 1 - load from file. It will read from file and create 2 linked lists, L1 and L2. If L1 and L2 exist, they are first destroyed and then they are recreated with data from the file  .
 2 - check that list L1 is sorted in increasing order.
 3 - merge L1 with L2 and print the resulting list, L1. The result list will be referenced from variable L1. It should check that BOTH lists are sorted in increasing order in order for the merge to work.
 4 - remove duplicates from L1. (this method will assumes L1 is sorted in increasing order.)
 5 - print lists L1 and L2.
 6 - destroy L1 and L2 (and free the memory). If L1 and L2 are NULL it should not crash.
 0 - exit.
 Enter your choice (1-6):  5

 Dummy node: data = -9999 (adr = 0x5230330)
 List items
 List pointers:      0x52313c0      0x5231410      0x5231460      0x52314b0      0x5231500      0x5231550      0x52315a0      0x52315f0      0x5231640      0x5231690      0x5233350      0x52333a0      0x52333f0      0x5233440      0x5233490      0x52334e0      0x5233530      0x5233580      0x52335d0      0x5233620      0x52316e0      0x5231730      0x5231780      0x52317d0      0x5231820      0x5231870      0x52318c0      0x5231910      0x5231960      0x52319b0      0x5233670      0x52336c0      0x5233710      0x5233760      0x52337b0      0x5233800      0x5233850      0x52338a0      0x52338f0      0x5233940      0x5231a00      0x5231a50      0x5231aa0      0x5231af0      0x5231b40      0x5231b90      0x5231be0      0x5231c30      0x5231c80      0x5231cd0      0x5233990      0x52339e0      0x5233a30      0x5233a80      0x5233ad0      0x5233b20      0x5233b70      0x5233bc0      0x5233c10      0x5233c60      0x5231d20      0x5231d70      0x5231dc0      0x5231e10      0x5231e60      0x5231eb0      0x5231f00      0x5231f50      0x5231fa0      0x5231ff0      0x5233cb0      0x5233d00      0x5233d50      0x5233da0      0x5233df0      0x5233e40      0x5233e90      0x5233ee0      0x5233f30      0x5233f80      0x5232040      0x5232090      0x52320e0      0x5232130      0x5232180      0x52321d0      0x5232220      0x5232270      0x52322c0      0x5232310      0x5233fd0      0x5234020      0x5234070      0x52340c0      0x5234110      0x5234160      0x52341b0      0x5234200      0x5234250      0x52342a0      0x5232360      0x52323b0      0x5232400      0x5232450      0x52324a0      0x52324f0      0x5232540      0x5232590      0x52325e0      0x5232630      0x52342f0      0x5234340      0x5234390      0x52343e0      0x5234430      0x5234480      0x52344d0      0x5234520      0x5234570      0x52345c0      0x5232680      0x52326d0      0x5232720      0x5232770      0x52327c0      0x5232810      0x5232860      0x52328b0      0x5232900      0x5232950      0x5234610      0x5234660      0x52346b0      0x5234700      0x5234750      0x52347a0      0x52347f0      0x5234840      0x5234890      0x52348e0      0x52329a0      0x52329f0      0x5232a40      0x5232a90      0x5232ae0      0x5232b30      0x5232b80      0x5232bd0      0x5232c20      0x5232c70      0x5234930      0x5234980      0x52349d0      0x5234a20      0x5234a70      0x5234ac0      0x5234b10      0x5234b60      0x5234bb0      0x5234c00      0x5232cc0      0x5232d10      0x5232d60      0x5232db0      0x5232e00      0x5232e50      0x5232ea0      0x5232ef0      0x5232f40      0x5232f90      0x5234c50      0x5234ca0      0x5234cf0      0x5234d40      0x5234d90      0x5234de0      0x5234e30      0x5234e80      0x5234ed0      0x5234f20      0x5232fe0      0x5233030      0x5233080      0x52330d0      0x5233120      0x5233170      0x52331c0      0x5233210      0x5233260      0x52332b0      0x5234f70      0x5234fc0      0x5235010      0x5235060      0x52350b0      0x5235100      0x5235150      0x52351a0      0x52351f0      0x5235240
 Length of above list = 200

<print_list_pointer> : List is NULL


 1 - load from file. It will read from file and create 2 linked lists, L1 and L2. If L1 and L2 exist, they are first destroyed and then they are recreated with data from the file  .
 2 - check that list L1 is sorted in increasing order.
 3 - merge L1 with L2 and print the resulting list, L1. The result list will be referenced from variable L1. It should check that BOTH lists are sorted in increasing order in order for the merge to work.
 4 - remove duplicates from L1. (this method will assumes L1 is sorted in increasing order.)
 5 - print lists L1 and L2.
 6 - destroy L1 and L2 (and free the memory). If L1 and L2 are NULL it should not crash.
 0 - exit.
 Enter your choice (1-6):  4

 Dummy node: data = -9999 (adr = 0x5230330)
 List items:                 0              1              2              3              4              5              6              7              8              9
 List pointers:      0x52313c0      0x52316e0      0x5231a00      0x5231d20      0x5232040      0x5232360      0x5232680      0x52329a0      0x5232cc0      0x5232fe0
 Length of above list = 10


 1 - load from file. It will read from file and create 2 linked lists, L1 and L2. If L1 and L2 exist, they are first destroyed and then they are recreated with data from the file  .
 2 - check that list L1 is sorted in increasing order.
 3 - merge L1 with L2 and print the resulting list, L1. The result list will be referenced from variable L1. It should check that BOTH lists are sorted in increasing order in order for the merge to work.
 4 - remove duplicates from L1. (this method will assumes L1 is sorted in increasing order.)
 5 - print lists L1 and L2.
 6 - destroy L1 and L2 (and free the memory). If L1 and L2 are NULL it should not crash.
 0 - exit.
 Enter your choice (1-6):  0
Exiting...==764==
==764== HEAP SUMMARY:
==764==     in use at exit: 0 bytes in 0 blocks
==764==   total heap usage: 206 allocs, 206 frees, 16,072 bytes allocated
==764==
==764== All heap blocks were freed -- no leaks are possible
==764==
==764== For lists of detected and suppressed errors, rerun with: -s
==764== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)