valgrind --leak-check=full ./a.out
==763== Memcheck, a memory error detector
==763== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==763== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==763== Command: ./a.out
==763==
==763== error calling PR_SET_PTRACER, vgdb might block


 1 - load from file. It will read from file and create 2 linked lists, L1 and L2. If L1 and L2 exist, they are first destroyed and then they are recreated with data from the file  .
 2 - check that list L1 is sorted in increasing order.
 3 - merge L1 with L2 and print the resulting list, L1. The result list will be referenced from variable L1. It should check that BOTH lists are sorted in increasing order in order for the merge to work.
 4 - remove duplicates from L1. (this method will assumes L1 is sorted in increasing order.)
 5 - print lists L1 and L2.
 6 - destroy L1 and L2 (and free the memory). If L1 and L2 are NULL it should not crash.
 0 - exit.
 Enter your choice (1-6):  1
Enter the name of the file with data: data1.txt
Reading list from file....
Reading list from file....


 1 - load from file. It will read from file and create 2 linked lists, L1 and L2. If L1 and L2 exist, they are first destroyed and then they are recreated with data from the file  .
 2 - check that list L1 is sorted in increasing order.
 3 - merge L1 with L2 and print the resulting list, L1. The result list will be referenced from variable L1. It should check that BOTH lists are sorted in increasing order in order for the merge to work.
 4 - remove duplicates from L1. (this method will assumes L1 is sorted in increasing order.)
 5 - print lists L1 and L2.
 6 - destroy L1 and L2 (and free the memory). If L1 and L2 are NULL it should not crash.
 0 - exit.
 Enter your choice (1-6):  3

 Dummy node: data = -9999 (adr = 0x5230330)
 List items:                 0              7             13             19             25
 List pointers:      0x52313c0      0x5231410      0x5231460      0x52314b0      0x5231500
 Length of above list = 5

 Dummy node: data = -9999 (adr = 0x5231550)
 List items:                 2              5             27
 List pointers:      0x52315a0      0x52315f0      0x5231640
 Length of above list = 3

 Dummy node: data = -9999 (adr = 0x5230330)
 List items:                 0              2              5              7             13             19             25             27
 List pointers:      0x52313c0      0x52315a0      0x52315f0      0x5231410      0x5231460      0x52314b0      0x5231500      0x5231640
 Length of above list = 8


 1 - load from file. It will read from file and create 2 linked lists, L1 and L2. If L1 and L2 exist, they are first destroyed and then they are recreated with data from the file  .
 2 - check that list L1 is sorted in increasing order.
 3 - merge L1 with L2 and print the resulting list, L1. The result list will be referenced from variable L1. It should check that BOTH lists are sorted in increasing order in order for the merge to work.
 4 - remove duplicates from L1. (this method will assumes L1 is sorted in increasing order.)
 5 - print lists L1 and L2.
 6 - destroy L1 and L2 (and free the memory). If L1 and L2 are NULL it should not crash.
 0 - exit.
 Enter your choice (1-6):  6


 1 - load from file. It will read from file and create 2 linked lists, L1 and L2. If L1 and L2 exist, they are first destroyed and then they are recreated with data from the file  .
 2 - check that list L1 is sorted in increasing order.
 3 - merge L1 with L2 and print the resulting list, L1. The result list will be referenced from variable L1. It should check that BOTH lists are sorted in increasing order in order for the merge to work.
 4 - remove duplicates from L1. (this method will assumes L1 is sorted in increasing order.)
 5 - print lists L1 and L2.
 6 - destroy L1 and L2 (and free the memory). If L1 and L2 are NULL it should not crash.
 0 - exit.
 Enter your choice (1-6):  0
Exiting...==763==
==763== HEAP SUMMARY:
==763==     in use at exit: 0 bytes in 0 blocks
==763==   total heap usage: 14 allocs, 14 frees, 13,000 bytes allocated
==763==
==763== All heap blocks were freed -- no leaks are possible
==763==
==763== For lists of detected and suppressed errors, rerun with: -s
==763== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)